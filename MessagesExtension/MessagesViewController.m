//
//  MessagesViewController.m
//  MessagesExtension
//
//  Created by hong7 on 16/9/16.
//  Copyright © 2016年 hong7. All rights reserved.
//

#import "MessagesViewController.h"

#import "HHLocationComposeViewController.h"
#import "HHLocationCompactComposeViewController.h"
#import "HHLocationViewController.h"

#import "HHLocation.h"

#import "Masonry.h"

@interface MessagesViewController ()<HHLocationCompactComposeViewControllerDelegate,HHLocationComposeViewControllerDelegate>

@property (nonatomic,assign,getter=isCreated) BOOL created;
@end

@implementation MessagesViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view.
    
    self.edgesForExtendedLayout = UIRectEdgeNone;
    self.automaticallyAdjustsScrollViewInsets = YES;

}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

#pragma mark - Conversation Handling

-(void)didBecomeActiveWithConversation:(MSConversation *)conversation {
    
    [super didBecomeActiveWithConversation:conversation];
    // Called when the extension is about to move from the inactive to active state.
    // This will happen when the extension is about to present UI.
    
    // Use this method to configure the extension and restore previously stored state.
    
    [self presentViewControllerByConvrsation:conversation style:self.presentationStyle];
}

-(void)willResignActiveWithConversation:(MSConversation *)conversation {
    // Called when the extension is about to move from the active to inactive state.
    // This will happen when the user dissmises the extension, changes to a different
    // conversation or quits Messages.
    
    // Use this method to release shared resources, save user data, invalidate timers,
    // and store enough state information to restore your extension to its current state
    // in case it is terminated later.
    NSLog(@"willResignActiveWithConversation%@",conversation);
}

-(void)didSelectMessage:(MSMessage *)message conversation:(MSConversation *)conversation {
    
    
}

-(void)didReceiveMessage:(MSMessage *)message conversation:(MSConversation *)conversation {
    // Called when a message arrives that was generated by another instance of this
    // extension on a remote device.
    
    // Use this method to trigger UI updates in response to the message.
}

-(void)didStartSendingMessage:(MSMessage *)message conversation:(MSConversation *)conversation {
    // Called when the user taps the send button.
}

-(void)didCancelSendingMessage:(MSMessage *)message conversation:(MSConversation *)conversation {
    // Called when the user deletes the message without sending it.
    
    // Use this to clean up state related to the deleted message.
}

-(void)willTransitionToPresentationStyle:(MSMessagesAppPresentationStyle)presentationStyle {
    // Called before the extension transitions to a new presentation style.
    
    // Use this method to prepare for the change in presentation style.
    
    [self presentViewControllerByConvrsation:self.activeConversation style:presentationStyle];
}

-(void)didTransitionToPresentationStyle:(MSMessagesAppPresentationStyle)presentationStyle {
    // Called after the extension transitions to a new presentation style.
    
    // Use this method to finalize any behaviors associated with the change in presentation style.
}


#pragma mark - HHLocationComposeViewControllerDelegate 

-(void)composeViewController:(HHLocationComposeViewController *)viewController choosedLocation:(HHLocation *)location {
    
    
    MSConversation * conversation = self.activeConversation;
    MSSession * session = conversation.selectedMessage.session;
    MSMessage * message = [self composeMessageWithHHLocation:location session:session];
    
    [self.activeConversation insertMessage:message completionHandler:^(NSError * _Nullable error) {
        if (error) {
            NSLog(@"%@",error);
        }
    }];
    
    [self dismiss];
}

#pragma mark - HHLocationCompactComposeViewControllerDelegate 

-(void)compactComposeViewControllerChoosedShareCurrentLocation:(HHLocationCompactComposeViewController *)viewController {
    
    self.created = YES;
    
    [self requestPresentationStyle:MSMessagesAppPresentationStyleExpanded];
}

-(void)compactComposeViewController:(HHLocationCompactComposeViewController *)viewController choosedLocation:(HHLocation *)location {
    
    
    MSConversation * conversation = self.activeConversation;
    MSSession * session = conversation.selectedMessage.session;
    MSMessage * message = [self composeMessageWithHHLocation:location session:session];
    
    [self.]
    
    [self.activeConversation insertMessage:message completionHandler:^(NSError * _Nullable error) {
        if (error) {
            NSLog(@"%@",error);
        }
    }];
    
    [self dismiss];
}

#pragma mark - Private


-(MSMessage *)composeMessageWithHHLocation:(HHLocation *)location session:(MSSession *)session {
    
    NSURLComponents * components = [NSURLComponents new];
    components.queryItems = [location queryItems];
    
    MSMessageTemplateLayout * layout = [MSMessageTemplateLayout new];
    layout.image = location.image;
    //layout.caption = @"caption";
    //layout.subcaption = @"subcaption";
    //layout.trailingCaption = @"trailingCaption";
    //layout.trailingSubcaption = @"trailingSubcaption";
    //layout.imageTitle = @"imageTitle";
    //layout.imageSubtitle = @"imageSubtitle";
    
    MSMessage * message = [[MSMessage alloc] initWithSession:session];
    message.layout = layout;
    message.URL = components.URL;
    
    return message;
}


-(UIViewController *)createCompactComposeViewController {
    HHLocationCompactComposeViewController * viewController = [[HHLocationCompactComposeViewController alloc] init];
    [viewController setDelegate:self];
    return viewController;
}

-(UIViewController *)createComposeViewController {
    HHLocationComposeViewController * viewController = [[HHLocationComposeViewController alloc] init];
    [viewController setDelegate:self];
    return viewController;
}

-(UIViewController *)createLocationViewControllerWithLocation:(HHLocation *)location {
    HHLocationViewController * viewController = [[HHLocationViewController alloc] init];
    viewController.coordinate = location.corrdinate;
    return viewController;
}


-(void )presentViewControllerByConvrsation:(MSConversation *)conversation style:(MSMessagesAppPresentationStyle)style {
    
    UIViewController * viewController = nil;
    if (style == MSMessagesAppPresentationStyleCompact) {
        self.created = NO;
        viewController = [self createCompactComposeViewController];
    }else {
        
        if (!self.isCreated && conversation.selectedMessage) {
            HHLocation * location = [[HHLocation alloc] initWithMSMessage:conversation.selectedMessage];
            viewController = [self createLocationViewControllerWithLocation:location];
        }else {
            viewController = [self createComposeViewController];
        }
    }
    
    [self presentViewController:viewController];
}


-(void)presentViewController:(UIViewController *)viewController {
    
    self.preferredContentSize = CGSizeMake(100.0f, 100.0f);
    
    for (UIViewController * child in self.childViewControllers) {
        [child willMoveToParentViewController:self];
        [child.view removeFromSuperview];
        [child removeFromParentViewController];
    }
    
    [self addChildViewController:viewController];
    [self.view addSubview:viewController.view];
    
    
    [viewController.view mas_makeConstraints:^(MASConstraintMaker *make) {
        make.edges.equalTo(self.view);
    }];
    [viewController didMoveToParentViewController:self];
    
}

@end
